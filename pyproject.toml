[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "enrich-ddf-floor-2"
version = "0.1.0"
description = "Data enrichment service for DDF Floor 2"
requires-python = ">=3.8"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
minversion = "6.0"
addopts = "--strict-markers --tb=short --cov=main --cov-report=term-missing --cov-report=html --cov-fail-under=80"
filterwarnings = [
    "ignore::DeprecationWarning"
]

# === OPTIMIZED LINTER CONFIGURATIONS ===

[tool.ruff]
target-version = "py38"
line-length = 88
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "htmlcov",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "C90",    # mccabe complexity
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "PERF",   # Perflint
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules that might be too strict for our use case
ignore = [
    "E501",   # Line too long (handled by black)
    "W505",   # Doc line too long
    "PLR2004", # Magic value used in comparison
    "PLR0913", # Too many arguments to function call
    "C901",   # Function is too complex
    "B008",   # Do not perform function calls in argument defaults
    "T201",   # print found
    "ERA001", # Found commented-out code
    "TRY003", # Avoid specifying long messages outside the exception class
    "PD901",  # df is a bad variable name
    "ARG002", # Unused method argument
    "UP015",  # Unnecessary open mode parameters
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["main"]
lines-after-imports = 2

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | htmlcov
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["main"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pylint.main]
# Files or directories to be skipped. They should be base names, not paths.
ignore = ["CVS", ".git", "__pycache__", "htmlcov", "venv", "build", "dist"]

# Add files or directories matching the regex patterns to the ignore-list.
ignore-patterns = ["^\\..*", ".*\\.tmp$", ".*\\.log$"]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "import-error",
    "no-member",
    "line-too-long",  # Handled by black
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 15
max-branches = 12
max-statements = 50

# === PYRIGHT/BASEDPYRIGHT CONFIGURATION ===
[tool.pyright]
include = [
    "main.py",
    "config.py", 
    "database/",
    "tests/"
]
exclude = [
    "**/__pycache__",
    "**/.*",
    "venv/",
    "build/",
    "dist/",
    "htmlcov/",
    "alembic/versions/",
    "scripts/",
    "docs/",
    "active/",
    ".coverage",
    "*.db",
    "*.log",
    ".tmp/",
    "tmp/"
]
ignore = [
    "alembic/",
    "scripts/",
    "QUICK_REFERENCE.md",
    "IMPLEMENTATION_SUMMARY.md"
]
pythonVersion = "3.13"
pythonPlatform = "Darwin"
typeCheckingMode = "basic"
useLibraryCodeForTypes = false
autoSearchPaths = true
autoImportCompletions = true
indexing = true 